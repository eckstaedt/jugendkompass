"use strict";(self.webpackChunkjugendkompass=self.webpackChunkjugendkompass||[]).push([[5143],{85075:function(e,t,r){r.r(t),r.d(t,{FilesystemWeb:function(){return d}});var i=r(8239),o=r(68384);function n(e){const t=e.split("/").filter(e=>"."!==e),r=[];return t.forEach(e=>{".."===e&&r.length>0&&".."!==r[r.length-1]?r.pop():r.push(e)}),r.join("/")}let d=(()=>{class e extends o.Uw{constructor(){super(...arguments),this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"]}initDb(){var t=this;return(0,i.Z)(function*(){if(void 0!==t._db)return t._db;if(!("indexedDB"in window))throw t.unavailable("This browser doesn't support IndexedDB");return new Promise((r,i)=>{const o=indexedDB.open(t.DB_NAME,t.DB_VERSION);o.onupgradeneeded=e.doUpgrade,o.onsuccess=()=>{t._db=o.result,r(o.result)},o.onerror=()=>i(o.error),o.onblocked=()=>{console.warn("db blocked")}})})()}static doUpgrade(e){const t=e.target.result;switch(e.oldVersion){case 0:case 1:default:t.objectStoreNames.contains("FileStorage")&&t.deleteObjectStore("FileStorage"),t.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}}dbRequest(e,t){var r=this;return(0,i.Z)(function*(){const i=-1!==r._writeCmds.indexOf(e)?"readwrite":"readonly";return r.initDb().then(r=>new Promise((o,n)=>{const d=r.transaction(["FileStorage"],i).objectStore("FileStorage")[e](...t);d.onsuccess=()=>o(d.result),d.onerror=()=>n(d.error)}))})()}dbIndexRequest(e,t,r){var o=this;return(0,i.Z)(function*(){const i=-1!==o._writeCmds.indexOf(t)?"readwrite":"readonly";return o.initDb().then(o=>new Promise((n,d)=>{const s=o.transaction(["FileStorage"],i).objectStore("FileStorage").index(e)[t](...r);s.onsuccess=()=>n(s.result),s.onerror=()=>d(s.error)}))})()}getPath(e,t){const r=void 0!==t?t.replace(/^[/]+|[/]+$/g,""):"";let i="";return void 0!==e&&(i+="/"+e),""!==t&&(i+="/"+r),i}clear(){var e=this;return(0,i.Z)(function*(){(yield e.initDb()).transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear()})()}readFile(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path),i=yield t.dbRequest("get",[r]);if(void 0===i)throw Error("File does not exist.");return{data:i.content?i.content:""}})()}writeFile(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path),i=e.data,o=e.recursive,n=yield t.dbRequest("get",[r]);if(n&&"directory"===n.type)throw"The supplied path is a directory.";const d=e.encoding,s=r.substr(0,r.lastIndexOf("/"));if(void 0===(yield t.dbRequest("get",[s]))){const r=s.indexOf("/",1);if(-1!==r){const i=s.substr(r);yield t.mkdir({path:i,directory:e.directory,recursive:o})}}const c=Date.now(),a={path:r,folder:s,type:"file",size:i.length,ctime:c,mtime:c,content:!d&&i.indexOf(",")>=0?i.split(",")[1]:i};return yield t.dbRequest("put",[a]),{uri:a.path}})()}appendFile(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path);let i=e.data;const o=r.substr(0,r.lastIndexOf("/")),n=Date.now();let d=n;const s=yield t.dbRequest("get",[r]);if(s&&"directory"===s.type)throw"The supplied path is a directory.";if(void 0===(yield t.dbRequest("get",[o]))){const r=o.indexOf("/",1);if(-1!==r){const i=o.substr(r);yield t.mkdir({path:i,directory:e.directory,recursive:!0})}}void 0!==s&&(i=s.content+i,d=s.ctime);const c={path:r,folder:o,type:"file",size:i.length,ctime:d,mtime:n,content:i};yield t.dbRequest("put",[c])})()}deleteFile(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path);if(void 0===(yield t.dbRequest("get",[r])))throw Error("File does not exist.");if(0!==(yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)])).length)throw Error("Folder is not empty.");yield t.dbRequest("delete",[r])})()}mkdir(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path),i=e.recursive,o=r.substr(0,r.lastIndexOf("/")),n=(r.match(/\//g)||[]).length,d=yield t.dbRequest("get",[o]),s=yield t.dbRequest("get",[r]);if(1===n)throw Error("Cannot create Root directory");if(void 0!==s)throw Error("Current directory does already exist.");if(!i&&2!==n&&void 0===d)throw Error("Parent directory must exist");if(i&&2!==n&&void 0===d){const r=o.substr(o.indexOf("/",1));yield t.mkdir({path:r,directory:e.directory,recursive:i})}const c=Date.now(),a={path:r,folder:o,type:"directory",size:0,ctime:c,mtime:c};yield t.dbRequest("put",[a])})()}rmdir(e){var t=this;return(0,i.Z)(function*(){const{path:r,directory:i,recursive:o}=e,n=t.getPath(i,r),d=yield t.dbRequest("get",[n]);if(void 0===d)throw Error("Folder does not exist.");if("directory"!==d.type)throw Error("Requested path is not a directory");const s=yield t.readdir({path:r,directory:i});if(0!==s.files.length&&!o)throw Error("Folder is not empty");for(const e of s.files){const n=`${r}/${e}`;"file"===(yield t.stat({path:n,directory:i})).type?yield t.deleteFile({path:n,directory:i}):yield t.rmdir({path:n,directory:i,recursive:o})}yield t.dbRequest("delete",[n])})()}readdir(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path),i=yield t.dbRequest("get",[r]);if(""!==e.path&&void 0===i)throw Error("Folder does not exist.");return{files:(yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)])).map(e=>e.substring(r.length+1))}})()}getUri(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path);let i=yield t.dbRequest("get",[r]);return void 0===i&&(i=yield t.dbRequest("get",[r+"/"])),{uri:(null==i?void 0:i.path)||r}})()}stat(e){var t=this;return(0,i.Z)(function*(){const r=t.getPath(e.directory,e.path);let i=yield t.dbRequest("get",[r]);if(void 0===i&&(i=yield t.dbRequest("get",[r+"/"])),void 0===i)throw Error("Entry does not exist.");return{type:i.type,size:i.size,ctime:i.ctime,mtime:i.mtime,uri:i.path}})()}rename(e){var t=this;return(0,i.Z)(function*(){return t._copy(e,!0)})()}copy(e){var t=this;return(0,i.Z)(function*(){return t._copy(e,!1)})()}requestPermissions(){return(0,i.Z)(function*(){return{publicStorage:"granted"}})()}checkPermissions(){return(0,i.Z)(function*(){return{publicStorage:"granted"}})()}_copy(e,t=!1){var r=this;return(0,i.Z)(function*(){let{toDirectory:o}=e;const{to:d,from:s,directory:c}=e;if(!d||!s)throw Error("Both to and from must be provided");o||(o=c);const a=r.getPath(c,s),l=r.getPath(o,d);if(a===l)return;if(function(e,t){e=n(e),t=n(t);const r=e.split("/"),i=t.split("/");return e!==t&&r.every((e,t)=>e===i[t])}(a,l))throw Error("To path cannot contain the from path");let u;try{u=yield r.stat({path:d,directory:o})}catch(f){const e=d.split("/");e.pop();const t=e.join("/");if(e.length>0&&"directory"!==(yield r.stat({path:t,directory:o})).type)throw new Error("Parent directory of the to path is a file")}if(u&&"directory"===u.type)throw new Error("Cannot overwrite a directory with a file");const y=yield r.stat({path:s,directory:c}),h=function(){var e=(0,i.Z)(function*(e,t,i){const n=r.getPath(o,e),d=yield r.dbRequest("get",[n]);d.ctime=t,d.mtime=i,yield r.dbRequest("put",[d])});return function(t,r,i){return e.apply(this,arguments)}}(),p=y.ctime?y.ctime:Date.now();switch(y.type){case"file":{const e=yield r.readFile({path:s,directory:c});return t&&(yield r.deleteFile({path:s,directory:c})),yield r.writeFile({path:d,directory:o,data:e.data}),void(t&&(yield h(d,p,y.mtime)))}case"directory":{if(u)throw Error("Cannot move a directory over an existing object");try{yield r.mkdir({path:d,directory:o,recursive:!1}),t&&(yield h(d,p,y.mtime))}catch(g){}const e=(yield r.readdir({path:s,directory:c})).files;for(const i of e)yield r._copy({from:`${s}/${i}`,to:`${d}/${i}`,directory:c,toDirectory:o},t);t&&(yield r.rmdir({path:s,directory:c}))}}})()}}return e._debug=!0,e})()}}]);